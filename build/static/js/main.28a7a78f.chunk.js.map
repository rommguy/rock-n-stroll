{"version":3,"sources":["components/map-icons.ts","components/Map.tsx","components/Carousel.tsx","components/Intro.tsx","serviceWorker.js","index.js","App.tsx","icons/stroller-icon.svg"],"names":["strollerIcon","L","icon","className","iconUrl","strollerIconSvg","iconSize","iconAnchor","popupAnchor","shadowSize","shadowAnchor","peopleList","id","location","Map","_useState","useState","_useState2","Object","slicedToArray","selectedItemId","setSelectedItem","popup","useRef","current","selectedItemRef","useEffect","map","center","zoom","setContent","popupWrapperRef","tileLayer","concat","attribution","maxZoom","addTo","_i","_peopleList","length","person","marker","type","on","onClick","useCallback","_ref","target","options","currentItem","unbindPopup","bindPopup","openPopup","react_default","a","createElement","style","height","ref","settings","speed","infinite","autoplay","easing","focusOnSelect","Carousel","props","lib_default","children","introSlides","StrollerIcon","backgroundColor","text","IntroSlide","src","alt","Intro","Carousel_Carousel","slideDef","Intro_IntroSlide","Boolean","window","hostname","match","ReactDOM","render","react_router_dom","react_router","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.28a7a78f.chunk.js","sourcesContent":["import L from \"leaflet\";\nimport strollerIconSvg from \"../icons/stroller-icon.svg\";\n\nexport const strollerIcon = L.icon({\n  className: \"strollerIcon\",\n  iconUrl: strollerIconSvg,\n  iconSize: [38, 95],\n  iconAnchor: [22, 94],\n  popupAnchor: [-3, -76],\n  // shadowUrl: 'my-icon-shadow.png',\n  shadowSize: [68, 95],\n  shadowAnchor: [22, 94]\n});\n","import React, {\n    FunctionComponent,\n    useEffect,\n    useCallback,\n    useRef,\n    useState,\n} from 'react'\nimport L from 'leaflet'\nimport { strollerIcon } from './map-icons'\nimport { Person } from '../types'\n\nconst peopleList: Person[] = [\n    { id: '1', location: [32.0853, 34.7818] },\n    { id: '2', location: [32.0853, 34.7828] },\n    { id: '3', location: [32.0833, 34.7808] },\n]\n\nexport const Map: FunctionComponent<{}> = () => {\n    const [selectedItemId, setSelectedItem] = useState('')\n    const { current: popup } = useRef(L.popup({}))\n    const selectedItemRef = useRef<L.Marker | null>(null)\n\n    useEffect(() => {\n        const map = L.map('map', {\n            center: [32.0853, 34.7818],\n            zoom: 13,\n        })\n        // popup\n        popup.setContent(popupWrapperRef.current as HTMLDivElement)\n\n        // tiles\n        const accessToken = `pk.eyJ1IjoiaWRvcm9zIiwiYSI6ImNqeGVpMW16ZTBqMWozcG13YmZsc3JleG8ifQ.L0n-wINnynN_5gTr9yUYZg`\n        L.tileLayer(\n            `https://api.tiles.mapbox.com/v4/{id}/{z}/{x}/{y}.png?access_token=${accessToken}`,\n            {\n                attribution:\n                    // tslint:disable-next-line: max-line-length\n                    'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>, Imagery © <a href=\"https://www.mapbox.com/\">Mapbox</a>',\n                maxZoom: 18,\n                id: 'mapbox.streets',\n            } as any\n        ).addTo(map)\n\n        // markers\n        for (const person of peopleList) {\n            const marker = L.marker(person.location, {\n                icon: strollerIcon,\n                id: person.id,\n                type: 'person',\n            } as any)\n            marker.addTo(map)\n            marker.on('click', onClick as any)\n        }\n    }, [])\n\n    const onClick = useCallback<L.LeafletEventHandlerFn>(\n        ({ target }: L.LeafletEvent) => {\n            setSelectedItem(target.options.id)\n            const currentItem = selectedItemRef.current\n            if (currentItem) {\n                currentItem.unbindPopup()\n            }\n            selectedItemRef.current = target\n            target.bindPopup(popup).openPopup()\n        },\n        []\n    )\n\n    const popupWrapperRef = useRef<HTMLDivElement>(null)\n\n    return (\n        <div>\n            <div id=\"map\" style={{ height: '100vh' }} />\n            <div ref={popupWrapperRef}>{selectedItemId}</div>\n        </div>\n    )\n}\n","import React, { FunctionComponent } from 'react'\nimport Slider, { Settings } from 'react-slick'\nimport 'slick-carousel/slick/slick-theme.scss'\nimport 'slick-carousel/slick/slick.scss'\nimport './Carousel.scss'\n\nconst settings: Settings = {\n    speed: 500,\n    infinite: false,\n    autoplay: false,\n    easing: 'ease-in-out',\n    focusOnSelect: true\n}\n\nexport const Carousel:FunctionComponent<{}> = props => {\n    return (<div\n        className=\"carousel-wrapper carousel-wrapper-dots height-as-parent\">\n        <Slider  {...settings}>\n            {props.children}\n        </Slider>\n    </div>)\n}\n","import React, { FunctionComponent } from 'react'\nimport { RouteProps } from '../types'\nimport { Carousel } from './Carousel'\nimport StrollerIcon from '../icons/stroller-icon.svg'\nimport './Intro.scss'\n\nconst introSlides: IntroSlideProps[] = [\n    {\n        icon: StrollerIcon,\n        backgroundColor: 'red',\n        text: 'אני השקופית הראשונה',\n    },\n    {\n        icon: StrollerIcon,\n        backgroundColor: 'blue',\n        text: 'אני השקופית השניה',\n    },\n    {\n        icon: StrollerIcon,\n        backgroundColor: 'green',\n        text: 'אני השקופית השלישית',\n    },\n]\n\ninterface IntroSlideProps {\n    icon: any\n    backgroundColor: string\n    text: string\n}\n\nconst IntroSlide: FunctionComponent<IntroSlideProps> = props => (\n    <div\n        className=\"intro-slide\"\n        style={{ backgroundColor: props.backgroundColor }}\n    >\n        <img src={props.icon} className=\"slide-icon\" alt=\"slide-icon\" />\n        <div className=\"slide-text\">{props.text}</div>\n    </div>\n)\n\nexport const Intro: FunctionComponent<RouteProps> = () => {\n    return (\n        <div className=\"intro-root\">\n            <Carousel>\n                {introSlides.map(slideDef => (\n                    <IntroSlide {...slideDef} />\n                ))}\n            </Carousel>\n        </div>\n    )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { FunctionComponent } from 'react'\nimport { Map } from './components/Map'\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport { Intro } from './components/Intro'\nimport './App.scss'\n\nexport const App: FunctionComponent<{}> = () => (\n    <Router>\n        <div className=\"App\">\n            <Route path=\"/map\" component={Map}></Route>\n            <Route path=\"/intro\" component={Intro}></Route>\n        </div>\n    </Router>\n)\n","module.exports = __webpack_public_path__ + \"static/media/stroller-icon.1a549300.svg\";"],"sourceRoot":""}